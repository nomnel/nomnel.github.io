<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[飲んだり寝たり]]></title>
  <link href="http://nomnel.net/atom.xml" rel="self"/>
  <link href="http://nomnel.net/"/>
  <updated>2013-07-30T23:44:16+09:00</updated>
  <id>http://nomnel.net/</id>
  <author>
    <name><![CDATA[nomnel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[考えたくない]]></title>
    <link href="http://nomnel.net/blog/diary-2/"/>
    <updated>2013-07-30T23:45:00+09:00</updated>
    <id>http://nomnel.net/blog/diary-2</id>
    <content type="html"><![CDATA[<p>改蔵か絶望先生に「それを言うのはお前で一万人目だ」みたいなネタあったと思うんだけど、一日に考えたり決めたりできる回数って決まってると思う。</p>

<p>正確にはMPみたいな感じで総量があって体調によって増減したりはするんだけど、一回考えるごとにいくらか使う。複雑なことだとより多く使う。</p>

<p>KP(考えポイント)は日常生活用や仕事用という様には分けれない。どんな服を着ようかとかこの道を通って行こうとかでも使われる。人間関係で悩んだりすると仕事も進まなくなるのはこのせい。</p>

<p>じゃあどうすればいいかって考えるとやっぱりKPは消費されるんだけど、考える対象を減らすことというのが自然で妥当で安直な解だと思う。服は着ないし家から出ない。人間関係はTwitterでふぁぼるだけ、ぐらいすると随分すっきりすると思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery.each内でbreakやcontinueする]]></title>
    <link href="http://nomnel.net/blog/break-or-continue-in-jquery-each/"/>
    <updated>2013-07-25T20:30:00+09:00</updated>
    <id>http://nomnel.net/blog/break-or-continue-in-jquery-each</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span> <span class="nx">obj</span><span class="p">,</span> <span class="nf">(i, val) -&gt;</span>
</span><span class='line'>  <span class="c1"># continueの代わり</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span> <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span> <span class="nx">obj</span><span class="p">,</span> <span class="nf">(i, val) -&gt;</span>
</span><span class='line'>  <span class="c1"># breakの代わり</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span> <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webサービスを作ってみる]]></title>
    <link href="http://nomnel.net/blog/develop-web-service/"/>
    <updated>2013-07-24T12:30:00+09:00</updated>
    <id>http://nomnel.net/blog/develop-web-service</id>
    <content type="html"><![CDATA[<p>先週からインターンはお休みをいただいてWebサービスを作っている. <!-- more -->今の見た目はこんな感じ(ま, まだ全然完成じゃないんだからねっ(言い訳1))</p>

<p><img src="http://gyazo.com/121d4b1284e97406b2df6c29b3af0250.png" alt="" /></p>

<p>で, 要はiPhoneアプリのレビューまとめを作ろうとしている.</p>

<h3>基準</h3>

<p>最初に以下の項目について考えた.</p>

<ol>
<li>実現性 - 最初は1~2週間で十分出来るもの</li>
<li>コンテンツの確保と更新 - 自分がコンテンツ作者だと続かない</li>
<li>ある程度の商圏 - 全く需要無いのもつらい, データで開発方針決めたりしたい</li>
<li>興味 - AppStoreのランキング以外の方法でアプリを知りたい</li>
<li>売上 - どうしたらより見てもらえるかなどのデータ欲しい</li>
<li>問題の解決 - しょぼくても何かしら世の中の役に立つこと</li>
</ol>


<p>偉そうに並べているけどなかなか条件をクリア出来るものが思いつかずに3日ぐらいかかった.</p>

<h3>サービスの意味</h3>

<p>こんなことを考えてた.</p>

<ol>
<li>アプリを見つける場所を増やす
 <p>自分が探すとき, 「AppStoreのランキングを見る -> たまにレビューを検索する -> 購入」という流れがほとんどだった. これはアイコンやタイトル, 評価をざっと眺めてから気になったものだけを細かく知りたいということなのだけれど, 既存のレビューサイトだとざっと眺めるのが難しうえに, 複数のレビューサイトを見るのも面倒で, 一サイトだけだと更新頻度にも限度があって不満だった.</p></li>
<li>レビューサイト界隈の裾野を広げる
 <p>レビューサイトで思い浮かぶのって2つ3つ程度しかない. 多分みんなも同様で, 結果, 有名サイトがほとんどのアクセスを占めているんだと思った. もしレビュー単位で同列に扱えればマイナーサイトでもアクセスが得られて, {中略}結果, レビューサイト界隈の多様性が増えたらいいと思う.</p></li>
<li>個人開発者のアプリでも注目されやすくする
 <p>有名レビューサイトにレビュー依頼をしても採用されないかもしれないことを考えるとすごくもったいない. なので開発者が自分で書いたレビューをプレスリリース的に載せる場所があればいいんじゃないかって思った.</p></li>
</ol>


<h3>開発方針</h3>

<ol>
<li>最初は最小の機能で</li>
<li>必要な物から作る</li>
<li>汚くてもいい</li>
<li>手間かけない</li>
</ol>


<p>とにかく早く作ることを目指した.</p>

<h3>必要な機能</h3>

<ol>
<li>レビューのスクレイピング</li>
<li>レビューと紹介されているアプリの表示 (最初はiPhone向けに作る)</li>
</ol>


<p>データの取得と更新はスクレイピングだけで良いのでタスクをcronで回すようにすれば管理画面も要らない, 素敵!</p>

<h3>予定</h3>

<ol>
<li>スクレイピング -> プロトタイプ2日 + 回しながらバグ修正とか追加とか2日</li>
<li>表示 -> 3日(CSS苦手)</li>
<li>本番環境の準備 -> 1.5日</li>
</ol>


<h3>実際</h3>

<ol>
<li>スクレイピング -> プロトタイプ5日 + バグ修正1日弱(もう増えないと思う)</li>
<li>表示 -> 2日目(途中), 後2日見込み</li>
</ol>


<p>以下ハイパー言い訳タイム.</p>

<h3>悩んだ(でいる) || 時間かかったところ</h3>

<ol>
<li>汚さをどこまで許容するか
 <p>自分だけが読むもの(<a href="https://github.com/nomnel/ProjectEuler/blob/master/086.scm">これ</a>とか)は1文字変数とか長い関数でもいいやってなるんだけど, 人が見る可能性考えると読みやすくしなきゃってなってそのために時間を浪費していると思った. 汚くてもいいやって思えたのは作り始めてしばらくしてからだったので, 既存のコードとの汚さのバランスとか考えてもっと時間を浪費することになった.</p></li>
<li>最小の機能とは
 <p>最小の機能と言いつつ範囲をはっきりさせてなかったので良くなかった. まだ必要ないrouteやcontrollerを作ってしまった. 範囲を決めたのは画面デザインを考え始めてからで, あんまり遷移させたくないなって思ったから. 必要な物から作ると決めていたので傷はそこまで深くなかったのは良かった.</p></li>
<li>画像を保存するか
 <p>アプリのアイコンを保存しておくか, Appleのにリンク貼るかも少し悩んだ. 工数増やしたくないし, AppBankがやってて怒られてないならいっかと思ってリンクにした.</p></li>
<li>何をどのように表示するか
 <p>何を表示するかとかユーザが必要な情報は何かとか難しい. レビューまとめなのでレビューを目立たせたいけど, 本文まで表示するとレビューサイトへのタダ乗りになるので良くない. レビューされたアプリを表示しないと見た目的にただのリンク集になってしまうし, 表示したら今度は一つのレビューにつき何個まで表示するのかとか, どこまで詳細に表示するかも悩むことになる. 今は, 最小限の表示にしておいてユーザ操作で残りを表示するのがいいかなって思ってる.</p></li>
</ol>


<p>やっぱりというか, 悩んでることは実際に手を動かし始めると簡単に解決することが多い. とりあえずやってみるの大事. &#8220;Shut the f**k up and write some code.&#8221;な.</p>

<h3>他に</h3>

<p>私事だけど開発に一番影響大きかったのが人生に関わる提案をいただいたこと. 正直なところ開発どころではなかったけど, やっと結論と気持ちの整理が出来た.</p>

<h3>今後</h3>

<p>現状だとただのリンク集なのでリリース後には</p>

<ol>
<li>レビューの人気ランキング</li>
<li>開発者(or ユーザ)がレビューを投稿できるように</li>
</ol>


<p>などサイトの特徴を出す機能を開発していきたい. 合わせて</p>

<ol>
<li>アプリ別</li>
<li>レビューサイト別</li>
<li>開発者別</li>
<li>カテゴリ別</li>
</ol>


<p>のレビュー一覧画面と, 並べ替え機能を追加していきたい.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで複数テーブルに跨ってincludesする]]></title>
    <link href="http://nomnel.net/blog/rails-multi-table-includes/"/>
    <updated>2013-07-20T23:00:00+09:00</updated>
    <id>http://nomnel.net/blog/rails-multi-table-includes</id>
    <content type="html"><![CDATA[<p>例えば<code>A has_many Bs</code>かつ<code>B has_one C</code>であるとき</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">bs</span><span class="p">:</span> <span class="ss">:c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすればよい. さらに<code>B has_many Ds</code>であれば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">bs</span><span class="p">:</span> <span class="o">[</span><span class="ss">:c</span><span class="p">,</span> <span class="ss">:ds</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>となる.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyでeachのブロックに複数の値を渡す]]></title>
    <link href="http://nomnel.net/blog/ruby-multi-values-to-each-block/"/>
    <updated>2013-07-20T13:30:00+09:00</updated>
    <id>http://nomnel.net/blog/ruby-multi-values-to-each-block</id>
    <content type="html"><![CDATA[<p>配列で渡す.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]].</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">b</span><span class="p">}</span>
</span><span class='line'><span class="c1"># 2</span>
</span><span class='line'><span class="c1"># 4</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ちなみに</span>
</span><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]].</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="c1"># 2</span>
</span><span class='line'><span class="c1"># 4</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paperclipのsytlesやconvert_optionsの変更を既存のデータにも適用する]]></title>
    <link href="http://nomnel.net/blog/paperclip-refresh-missing-styles/"/>
    <updated>2013-07-18T11:35:00+09:00</updated>
    <id>http://nomnel.net/blog/paperclip-refresh-missing-styles</id>
    <content type="html"><![CDATA[<p>例えば<a href="http://nomnel.net/blog/fjord-day35/">後付で投稿画像を640px x 640pxに統一するようにした</a>ときなど. 既存のデータにもその変更を反映したいときは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake paperclip:refresh:missing_styles
</span></code></pre></td></tr></table></div></figure>


<p>とすればPaperclipで管理している全てのデータ(original以外)を現在のルールで再生成してくれる. ただこれだと変更に関係ないクラスも(ex: BookCoverだけ変更したのにUserImageも)再生成されるので非効率. なので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">BookCover</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cover</span><span class="o">|</span>
</span><span class='line'>  <span class="n">cover</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">reprocess!</span><span class="p">(</span><span class="o">*</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cover</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># エラー処理</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにすれば特定のクラスのデータだけ再生成できる.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで多対多の関係を表現する]]></title>
    <link href="http://nomnel.net/blog/rails-many-to-many-relationship/"/>
    <updated>2013-07-14T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/rails-many-to-many-relationship</id>
    <content type="html"><![CDATA[<p>例えばUserモデルとCompanyモデルが多対多(お互いhas_many)の関係であることを表現するときは, 中間のモデルCompanyUser(アルファベット順にならべる)を使う.</p>

<p>それぞれコードは以下のようになる.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:company_users</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:companies</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:company_users</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/company.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Company</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:company_users</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:company_users</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/company_user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CompanyUser</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:company</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でObserverを使う]]></title>
    <link href="http://nomnel.net/blog/rails4-observer/"/>
    <updated>2013-07-14T16:45:00+09:00</updated>
    <id>http://nomnel.net/blog/rails4-observer</id>
    <content type="html"><![CDATA[<p>Rails4ではobserversが削除されているので, 使用したい場合は<code>rails-observer</code>gemをインストールする.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails-observers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>callbackで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hoge</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_save</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># 何か処理</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>や</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hoge</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_save</span> <span class="ss">:some_action</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_action</span>
</span><span class='line'>    <span class="c1"># 何か処理</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにしてもよい.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでSQLiteを操作する]]></title>
    <link href="http://nomnel.net/blog/rails-db-command/"/>
    <updated>2013-07-13T20:00:00+09:00</updated>
    <id>http://nomnel.net/blog/rails-db-command</id>
    <content type="html"><![CDATA[<p>MySQLだと<code>mysql -u root -p DATABASE_NAME</code>とかすれば直接操作出来るんだけどSQLiteだとどうすんのかなー, って思ってたら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rails db
</span></code></pre></td></tr></table></div></figure>


<p>でいいっぽい. もちろんMySQLをDBに指定していたら上のコマンドでMySQLが起動される.</p>

<p>ちなみに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>終了
</span><span class='line'>.exit or .quit
</span><span class='line'>
</span><span class='line'>テーブル一覧
</span><span class='line'>.tables
</span><span class='line'>
</span><span class='line'>その他コマンド
</span><span class='line'>.help
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日記 1]]></title>
    <link href="http://nomnel.net/blog/diary-1/"/>
    <updated>2013-07-13T00:00:00+09:00</updated>
    <id>http://nomnel.net/blog/diary-1</id>
    <content type="html"><![CDATA[<p>ブログしばらく書いてないと思ったら一ヶ月ぐらい書いてなかった. しばらく書いてないと次書くときは高度なこと書かなきゃいけない気がして余計書きにくい. Railsで多対多の関係表現するのどうするんだっけとかいつも忘れるのでメモっておきたいんだけど書いてないとこれじゃショボすぎるからやめとこうと思って書かない. 結果またググることになる.</p>

<p>といっても自分で制限かけてるだけだから普段からショボいこと書いてたら遠慮なくショボいこと書けるようになると思った. 日記だとどう頑張ってもショボいことしか書けないけど書くと一日の振り返り出来そうだし都合良い. あと毎日続けたいので出来るだけ考えなくても書けるようにしたい. <a href="https://twitter.com/hitode909">趣味はマリンスポーツです</a>さんの<a href="http://hitode909.hatenablog.com/">日記</a>ぽい文体だとダラダラ書ける感じがして良い. そのうちもっと楽なの思いつくかもしれないけどとりあえずこんな書き方でやろうと思う.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Recordで属性にアクセスするメソッドを上書きする]]></title>
    <link href="http://nomnel.net/blog/acticerecord-redefine-attr-access-method/"/>
    <updated>2013-06-18T22:00:00+09:00</updated>
    <id>http://nomnel.net/blog/acticerecord-redefine-attr-access-method</id>
    <content type="html"><![CDATA[<p>RailsでUserモデルがあってそれがnameという属性を持っているとする. このとき例えば, User#nameの値を条件fooによって変えたいとき,<!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="n">foo</span> <span class="p">?</span> <span class="nb">self</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="p">:</span> <span class="s1">&#39;some special value&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにnameメソッドを<a href="#caution">上書き</a>してやればよい.</p>

<p>ちなみに<code>self[:name]</code>の<code>[]</code>は<code>read_attribute</code>のaliasで, 別に<code>write_attribute</code>もあるらしい(<a href="http://blog.eiel.info/blog/2012/12/17/read-attribute-activerecord/">参考</a>).</p>

<p><a name="caution">※</a> 上書きというよりは先に定義していると言った方が正確だと思う. というのもaround aliasを使って</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:org_name</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="n">foo</span> <span class="p">?</span> <span class="n">org_name</span> <span class="p">:</span> <span class="s1">&#39;some special value&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように定義しようとすると<code>ねーむってなぁに？</code>って怒られるからだ. 多分(確認すればいいのだけど), <code>method_missing</code>で処理してるんだと思う.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン(54) 怖話ブログの日付フォーマット修正]]></title>
    <link href="http://nomnel.net/blog/fjord-days-54/"/>
    <updated>2013-06-17T15:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-days-54</id>
    <content type="html"><![CDATA[<p>「怖話ブログの日付フォーマットがおかしい」に取り組んだ記録.<!-- more --></p>

<p><a href="http://blog.kowabana.jp/">怖話ブログ</a>で日付フォーマットが<code>dd/mm/yyyy</code>になっているのを<code>yyyy/mm/dd</code>に修正する作業.</p>

<h3>成功ルート</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git@github.com:fjordllc/blog-kowabana-jp.git
</span><span class='line'><span class="nb">cd </span>blog-kowabana-jp
</span></code></pre></td></tr></table></div></figure>


<p>で<code>bundle install</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Fetching gem metadata from http://rubygems.org/.........
</span><span class='line'><span class="c"># 中略</span>
</span><span class='line'>Could not find sinatra-content-for-0.2 in any of the sources
</span></code></pre></td></tr></table></div></figure>


<p>となって失敗するので(<a href="#fail1">迷走1へ</a>), lokkaのmasterをmergeしてみる.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git remote add lokka git@github.com:lokka/lokka.git
</span><span class='line'>git fetch lokka
</span><span class='line'>git merge lokka/master
</span></code></pre></td></tr></table></div></figure>


<p>すると<code>bundle install</code>成功!</p>

<p>次に<code>bundle exec rackup</code>して実画面でも確認してみる -> 問題なし</p>

<p>最後にテスト通るか確認しておく(<a href="#fail2">迷走2へ</a>).</p>

<p>無事全てのテストがパスしたのでpush.</p>

<p>ちなみに変更は以下のように形式を指定してやっただけ.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">-        &lt;p class=&quot;date&quot;&gt;</span><span class="cp">&lt;%=</span> <span class="n">l</span> <span class="n">post</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">to_time</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">+        &lt;p class=&quot;date&quot;&gt;</span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y/%m/%d&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a name="fail1">迷走1</a></h3>

<ol>
<li>Gemfileから<code>sinatra-content-for</code>を消してみよう</li>
<li>-> なんやかんやダメ</li>
<li>テンプレートの変更のみやし, 素のlokkaにテンプレートコピって確認すればええやろ</li>
<li>-> <a href="https://twitter.com/komagata">@komagata</a>「( ◠‿◠ )☛ なわけねーだろ」僕「▂▅▇█▓▒░(&#8216;ω&#8217;)░▒▓█▇▅▂」</li>
<li><a href="https://twitter.com/komagata">@komagata</a>「lokkaのmasterをmergeすればいんじゃね?」僕「( ﾟдﾟ)ﾊｯ!」</li>
</ol>


<h3><a name="fail2">迷走2</a></h3>

<p><code>bundle exec rake</code>しても</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>syck has been removed
</span><span class='line'>Delete Database...
</span></code></pre></td></tr></table></div></figure>


<p>とのみ表示されてspecが実行されない(前回の作業週ではここで力尽きた). (今回の作業週でも<code>git merge lokka/master</code>して更新している)不思議に思って<code>-t</code>オプションを付けてみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>syck has been removed
</span><span class='line'>** Invoke default <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Invoke spec:setup <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Execute spec:setup
</span><span class='line'>** Invoke db:delete <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Execute db:delete
</span><span class='line'>Delete Database...
</span><span class='line'>** Invoke spec <span class="o">(</span>first_time, not_needed<span class="o">)</span>
</span><span class='line'>** Execute default
</span></code></pre></td></tr></table></div></figure>


<p>と表示される. 比較のためlokkaにも同様にしてみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>syck has been removed
</span><span class='line'>** Invoke default <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Invoke spec:setup <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Execute spec:setup
</span><span class='line'>** Invoke db:delete <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Execute db:delete
</span><span class='line'>Delete Database...
</span><span class='line'>** Invoke spec <span class="o">(</span>first_time<span class="o">)</span>
</span><span class='line'>** Invoke spec:setup
</span><span class='line'>** Execute spec
</span><span class='line'>** Execute default
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><code>Invoke spec</code>の<code>not_needed</code>が怪しい!!</li>
<li>-> rakeのソースコードへ</li>
<li>-> 分からない</li>
<li>-> 気分転換に新しい環境でやり直してみよう!!</li>
<li>-> <code>bundle exec rake</code>でspecが実行される</li>
<li>-> (ﾟДﾟ)ﾊｧ?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitでリモートのブランチをチェックアウトする]]></title>
    <link href="http://nomnel.net/blog/git-checkout-remote-branch/"/>
    <updated>2013-06-17T13:30:00+09:00</updated>
    <id>http://nomnel.net/blog/git-checkout-remote-branch</id>
    <content type="html"><![CDATA[<p>よく忘れるので.<!-- more --></p>

<p>リモートがoriginだとして,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git checkout -b new-branch origin/new-branch
</span></code></pre></td></tr></table></div></figure>


<p>持ってくるだけなら,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git branch new-branch origin/new-branch
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsでビルド失敗時にGmailで通知する]]></title>
    <link href="http://nomnel.net/blog/jenkins-notification-using-gmail/"/>
    <updated>2013-06-14T00:00:00+09:00</updated>
    <id>http://nomnel.net/blog/jenkins-notification-using-gmail</id>
    <content type="html"><![CDATA[<p>Manage Jenkins -> Configure Systemを開き, E-mail Notification欄に以下のように記述する.<!-- more --></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SMTP server: smtp.gmail.com
</span><span class='line'>Default user e-mail suffix: 空白</span></code></pre></td></tr></table></div></figure>


<p><code>Advanced...</code>をクリックして, 詳細設定を表示し,<code>use SMTP Authentication</code>にチェックを入れて,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User Name: [USERNAME]@gmail.com
</span><span class='line'>Password: 上のパスワード
</span><span class='line'>Use SSL: チェックを入れる
</span><span class='line'>SMTP Port: 465
</span><span class='line'>Reply-To Address: [USERNAME]@gmail.com
</span><span class='line'>Charset: UTF-8</span></code></pre></td></tr></table></div></figure>


<p>終わったら<code>Test configuration by sending test e-mail</code>にチェックを入れて, <code>Test e-mail recipient</code>に送信先アドレスを入力し, <code>Test configuration</code>をクリックしてテスト送信を行う. <code>Email was successfully sent</code>を表示されたら成功.</p>

<p><code>Save</code>もしくは<code>Apply</code>をクリックして設定を保存しておくのを忘れずに.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでbefore_destroyを使うときの注意点]]></title>
    <link href="http://nomnel.net/blog/rails-before-destroy-with-relation-model/"/>
    <updated>2013-06-06T00:30:00+09:00</updated>
    <id>http://nomnel.net/blog/rails-before-destroy-with-relation-model</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:bars</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>  <span class="n">before_destroy</span> <span class="ss">:do_something</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_something</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">bars</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">bars</span><span class="o">.</span><span class="n">map</span> <span class="o">&amp;</span><span class="ss">:somethig_cool</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>このように, <code>has_many</code>(<code>has_one</code>)な関係をものを<code>before_destroy</code>で使うには注意が必要. 上の例だと<code>before_destroy</code>の前にbarsは削除されてしまうので, <code>bars.blank?</code>は必ず真になり<code>bars.map &amp;:somethig_cool</code>は永久に実行されない.</p>

<p>これを避けるには以下のようにする.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_destroy</span> <span class="ss">:do_something</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:bars</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 以下略</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>before_destroy</code>と<code>has_many</code>の順番を逆にしただけだが, これで期待通りの挙動(<code>before_destroy</code>の後にbarsを削除)になる.</p>

<p>なのでこのようなときはObserverは使えない.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooObserver</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Observer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">before_destroy</span> <span class="n">foo</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">foo</span><span class="o">.</span><span class="n">bars</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">.</span><span class="n">bars</span><span class="o">.</span><span class="n">map</span> <span class="o">&amp;</span><span class="ss">:somethig_cool</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上の<code>before_destroy</code>はbarsが削除されてから実行される.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyでサブクラスの取得]]></title>
    <link href="http://nomnel.net/blog/ruby-get-subclasses/"/>
    <updated>2013-06-05T16:00:00+09:00</updated>
    <id>http://nomnel.net/blog/ruby-get-subclasses</id>
    <content type="html"><![CDATA[<p>直接の子クラスのみなら<!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subclasses</span>
</span><span class='line'>    <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">klass</span><span class="o">|</span> <span class="n">klass</span><span class="o">.</span><span class="n">superclass</span> <span class="o">==</span> <span class="nb">self</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>子孫クラス(?)全てなら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subclasses</span>
</span><span class='line'>    <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">klass</span><span class="o">|</span> <span class="n">klass</span> <span class="o">&lt;</span> <span class="nb">self</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで配列展開]]></title>
    <link href="http://nomnel.net/blog/ruby-expand-array-as-function-arguments/"/>
    <updated>2013-06-05T01:00:00+09:00</updated>
    <id>http://nomnel.net/blog/ruby-expand-array-as-function-arguments</id>
    <content type="html"><![CDATA[<p>Rubyで引数に与える配列に*をつけると, 配列を展開することができる.<!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hoge</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">args</span> <span class="o">=</span> <span class="o">[*</span><span class="n">args</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">hoge</span> <span class="mi">1</span>      <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="n">hoge</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span> <span class="c1"># =&gt; [1, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>便利.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン(53) ブロック機能のバグ修正]]></title>
    <link href="http://nomnel.net/blog/fjord-days-53/"/>
    <updated>2013-06-04T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-days-53</id>
    <content type="html"><![CDATA[<p>何日目か考えるのが面倒なので単なる連番にする.</p>

<p>前回の作業週から取り組んでいた<a href="http://nomnel.net/blog/fjord-day52/">ブロック機能のバグ修正</a>の話. ブロックしたユーザが非表示にならず, 再度ブロックするとDBのユニーク制約に違反してエラーになるのが原因だった.<!-- more --></p>

<p>なのでブロック済みユーザのコメントは取得しないようにしようと試みる. 怖話では, 怖い話(Story), 怖い画像(Wallpaper), 怖い漫画(Comic)のそれぞれにコメントを付けることが出来(acts_as_commentable), ブロックは投稿したユーザからコメントしたユーザへの一方向になっている. また, 管理者以外のユーザがブロック済みユーザのコメントを見ることは無いはずなのでCommentクラスのdefault_scopeに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_scope</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">joins</span><span class="p">(</span><span class="s1">&#39;left join stories    on comments.commentable_type = &quot;Story&quot;     and comments.commentable_id = stories.id &#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">joins</span><span class="p">(</span><span class="s1">&#39;left join wallpapers on comments.commentable_type = &quot;Wallpaper&quot; and comments.commentable_id = wallpapers.id &#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">joins</span><span class="p">(</span><span class="s1">&#39;left join comics     on comments.commentable_type = &quot;Comic&quot;     and comments.commentable_id = comics.id &#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">where</span><span class="p">(</span><span class="s1">&#39;comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =</span>
</span><span class='line'><span class="s1">    (case when comments.commentable_type = &quot;Story&quot;     then stories.user_id</span>
</span><span class='line'><span class="s1">          when comments.commentable_type = &quot;Wallpaper&quot; then wallpapers.user_id</span>
</span><span class='line'><span class="s1">          else                                              comics.user_id end))&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いた.</p>

<p>これで&#8221;ブロック済みユーザのコメントは取得しない&#8221;という目的は達成されるのだが, 今度は<code>includes(:commentable)</code>とすると<code>ActiveRecord::EagerLoadPolymorphicError - Can not eagerly load the polymorphic association :commentable</code>となってしまう.</p>

<p>回避する方法は分からなかったのだが, 現状<code>includes(:commentable)</code>が必要になる箇所はトップページ(/), コメント一覧ページ(/comments), 怖い漫画のトップページ(/comics)であり, 特にトップページは表示回数が多いはずなのでRailsやその他のキャッシュで対処出来ないかな…という淡い期待でそのままにした.</p>

<p>何か他にいい方法無いかな…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でturbolinksを使わない]]></title>
    <link href="http://nomnel.net/blog/rails4-no-turbolinks/"/>
    <updated>2013-05-29T15:04:00+09:00</updated>
    <id>http://nomnel.net/blog/rails4-no-turbolinks</id>
    <content type="html"><![CDATA[<p><code>rails new</code>するときにturbolinksがbundlerでインストールされるので, 嫌なら<code>--skip-bundle</code>オプションを付けて作成する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>rails new APPNAME --skip-bundle
</span></code></pre></td></tr></table></div></figure>


<p>でまず, <code>Gemfile</code>から</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;turbolinks&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>の行をコメントアウト.</p>

<p>次に<code>app/assets/javascripts/application.js</code>で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require turbolinks</span>
</span></code></pre></td></tr></table></div></figure>


<p>の行を削除.</p>

<p>最後に<code>app/views/layouts/application.html.erb</code>で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span>    <span class="s2">&quot;application&quot;</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s2">&quot;all&quot;</span><span class="p">,</span> <span class="s2">&quot;data-turbolinks-track&quot;</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;application&quot;</span><span class="p">,</span> <span class="s2">&quot;data-turbolinks-track&quot;</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>となっている箇所を</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span>    <span class="s2">&quot;application&quot;</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s2">&quot;all&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;application&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>に変更.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン52日目]]></title>
    <link href="http://nomnel.net/blog/fjord-day52/"/>
    <updated>2013-05-23T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-day52</id>
    <content type="html"><![CDATA[<p>さて今日は</p>

<ol>
<li>背景画像切り替えが出来なくなっている原因の調査</li>
<li>ランキング入りの怖話が削除されるとトップページ、ランキングページが表示できなくなるバグ修正</li>
<li>Twitter Cardsの申請のために各ページにog:titleを追加</li>
<li>ブロック機能のバグ修正 (途中)</li>
</ol>


<p>をしていた. <!-- more --></p>

<p>1は前回&#8221;怖話中で指定の画像が無い場合に背景がなくなる&#8221;の対策をした際に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>  <span class="nv">type: </span><span class="s">&#39;get&#39;</span>
</span><span class='line'>  <span class="nv">url: </span><span class="s">&#39;画像のURL&#39;</span>
</span><span class='line'>  <span class="nv">success: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="err">そのまま表示</span>
</span><span class='line'>  <span class="nv">error: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="err">デフォルト画像を表示</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにやっていたがために<code>Same Origin Policy</code>に違反するようになってしまったことが原因(本番環境では画像は<code>cdn.kowabana.jp</code>という別ドメインにある). Access-Control-Allow-Origin ヘッダーというのを<code>cdn.kowabana.jp</code>側に追加してやればいいらしいけどどうやるんだろ.</p>

<p>2はそもそも怖話が削除されたときにランキングからも削除されなければいけない(はず)なので, StoryモデルからRankingモデルに<code>dependent: :destroy</code>を追加.</p>

<p>3は<code>app/views/layouts/application.html.haml</code>にメタタグを追加するだけ(各ページのタイトルを生成する関数はすでにあったので).</p>

<p>4はコメントしたユーザを指定してブロック出来る機能なのだけれど, ブロックしたはずのユーザのコメントも表示されているというもの(もう一度ブロックするとユニーク制約によりエラー). 怖い話, 画像, 漫画の全てにコメントをつけることが出来る仕様なので, それぞれで場合分けをしてブロックされたユーザのコメントは取得しないようにしたい. 具体的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">comments</span><span class="p">.</span><span class="o">*</span> <span class="k">from</span> <span class="n">comments</span>
</span><span class='line'><span class="k">left</span> <span class="k">join</span> <span class="n">stories</span>    <span class="k">on</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_type</span> <span class="o">=</span> <span class="s1">&#39;Story&#39;</span>     <span class="k">and</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_id</span> <span class="o">=</span> <span class="n">stories</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="k">left</span> <span class="k">join</span> <span class="n">wallpapers</span> <span class="k">on</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_type</span> <span class="o">=</span> <span class="s1">&#39;Wallpaper&#39;</span> <span class="k">and</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_id</span> <span class="o">=</span> <span class="n">wallpapers</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="k">left</span> <span class="k">join</span> <span class="n">comics</span>     <span class="k">on</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_type</span> <span class="o">=</span> <span class="s1">&#39;Comic&#39;</span>     <span class="k">and</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_id</span> <span class="o">=</span> <span class="n">comics</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="k">where</span> <span class="n">comments</span><span class="p">.</span><span class="n">user_id</span> <span class="k">not</span> <span class="k">in</span> <span class="p">(</span><span class="k">select</span> <span class="n">blocks</span><span class="p">.</span><span class="n">destination_id</span> <span class="k">from</span> <span class="n">blocks</span> <span class="k">where</span> <span class="n">blocks</span><span class="p">.</span><span class="n">source_id</span> <span class="o">=</span>
</span><span class='line'><span class="p">(</span><span class="k">case</span> <span class="k">when</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_type</span> <span class="o">=</span> <span class="s1">&#39;Story&#39;</span>     <span class="k">then</span> <span class="n">stories</span><span class="p">.</span><span class="n">user_id</span>
</span><span class='line'>      <span class="k">when</span> <span class="n">comments</span><span class="p">.</span><span class="n">commentable_type</span> <span class="o">=</span> <span class="s1">&#39;Wallpaper&#39;</span> <span class="k">then</span> <span class="n">wallpapers</span><span class="p">.</span><span class="n">user_id</span>
</span><span class='line'>      <span class="k">else</span>                                              <span class="n">comics</span><span class="p">.</span><span class="n">user_id</span> <span class="k">end</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようなSQLを発行できるようにしたい.</p>

<p>基本的にブロック済みのコメントは表示されないはずなので, とりあえずdefault_scopeに以下のように記述してみたのだが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_scope</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">joins</span><span class="p">(</span><span class="s1">&#39;left join stories    on comments.commentable_type = &quot;Story&quot;     and comments.commentable_id = stories.id &#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">joins</span><span class="p">(</span><span class="s1">&#39;left join wallpapers on comments.commentable_type = &quot;Wallpaper&quot; and comments.commentable_id = wallpapers.id &#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">joins</span><span class="p">(</span><span class="s1">&#39;left join comics     on comments.commentable_type = &quot;Comic&quot;     and comments.commentable_id = comics.id &#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">where</span><span class="p">(</span><span class="s1">&#39;comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =</span>
</span><span class='line'><span class="s1">    (case when comments.commentable_type = &quot;Story&quot; then stories.user_id when comments.commentable_type = &quot;Wallpaper&quot; then wallpapers.user_id else comics.user_id end))&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Can not eagerly load the polymorphic association</code>と表示されて失敗. 一旦ここまで.</p>
]]></content>
  </entry>
  
</feed>
