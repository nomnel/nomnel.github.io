<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 飲んだり寝たり]]></title>
  <link href="http://nomnel.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://nomnel.net/"/>
  <updated>2014-09-04T23:46:57+09:00</updated>
  <id>http://nomnel.net/</id>
  <author>
    <name><![CDATA[nomnel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Re: 接客と委譲とオープンクラス]]></title>
    <link href="http://nomnel.net/blog/open-class-and-delegation/"/>
    <updated>2014-09-04T23:45:00+09:00</updated>
    <id>http://nomnel.net/blog/open-class-and-delegation</id>
    <content type="html"><![CDATA[<p>委譲とオープンクラスを接客で例示する、という話が<a href="http://shgam.hatenadiary.jp/entry/2014/09/04/020405">【Ruby】接客と委譲</a>(元は「接客と委譲とオープンクラス」)で書かれていてすごくいい例示だと思ったんだけど, なんかちょっと違うなーと思ったところがあったので書いてみる. 設定とかは本家を参照してほしい.</p>

<p>```ruby</p>

<h1>チーフ</h1>

<p>class Chief
  def initialize</p>

<pre><code>@info = { "トイレ" =&gt; "2F東3扉前", "喫煙所" =&gt; "1F西門外" }
</code></pre>

<p>  end</p>

<p>  def answer(target)</p>

<pre><code>puts "#{target}は#{@info[target]}にございます。"
</code></pre>

<p>  end
end</p>

<h1>日雇いバイト</h1>

<p>class PartTimer
  def initialize(chief)</p>

<pre><code>@chief = chief
</code></pre>

<p>  end
end</p>

<h1>チーフのヤマダさん</h1>

<p>yamada = Chief.new</p>

<h1>日雇いバイトのタナカさん。担当チーフはヤマダさん</h1>

<p>tanaka = PartTimer.new(yamada)</p>

<h1>お客さんにトイレの場所を質問されたヤマダさん</h1>

<h1>答えようとするのですが、教えられて(定義されて)ないのでパニックになります</h1>

<p>tanaka.answer('トイレ')</p>

<h1>=> NoMethodError: undefined method `answer' for #&lt;PartTimer:0x007fa67d23ea58></h1>

<h1>ヤマダさん「タナカさん、分からなかったらお客さんにちょっと待っていただいて、私に聞いてください」</h1>

<h1>タナカさんは、自分では解決出来ないときの対処法を教えられます</h1>

<h1>既存のクラスを拡張(オープンクラス)</h1>

<p>class PartTimer
  def method_missing(name, *args)</p>

<pre><code>puts "少々お待ちください、ただいま分かる者に確認いたします…"
@chief.__send__ name, *args
</code></pre>

<p>  end
end</p>

<h1>今度は喫煙所の場所を聞かれたヤマダさん</h1>

<h1>自分では分からないのでチーフに確認し、その答えをお客さんに伝えます。</h1>

<p>tanaka.answer('喫煙所')</p>

<h1>少々お待ちください、ただいま分かる者に確認いたします…</h1>

<h1>喫煙所は1F西門外にございます。</h1>

<h1>めでたしめでたし</h1>

<p>```</p>

<h3>ポイント</h3>

<ul>
<li>一度定義したクラスに、オープンクラスによって新たなメソッドを定義している</li>
<li>method_missingの中でchiefに処理を移譲している</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sunspotでfacetの数に制限があった]]></title>
    <link href="http://nomnel.net/blog/sunspot-limit-of-facets/"/>
    <updated>2014-03-11T22:30:00+09:00</updated>
    <id>http://nomnel.net/blog/sunspot-limit-of-facets</id>
    <content type="html"><![CDATA[<p>facetはデフォルトだと100件までしか取れない.</p>

<p><code>ruby
facet(:hoge, limit: -1)
</code></p>

<p>みたいにlimitに負の値を与えると制限無しになる.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SinatraでActiveRecord使う]]></title>
    <link href="http://nomnel.net/blog/sinatra-active-record/"/>
    <updated>2013-10-21T21:45:00+09:00</updated>
    <id>http://nomnel.net/blog/sinatra-active-record</id>
    <content type="html"><![CDATA[<p><a href="http://nomnel.net/blog/sinatra-hello-world/">SinatraでHello Worldするまで</a>の続きとして. SQLiteの場合. <!-- more --></p>

<p>Gemfileに以下を追加してbundle installする.</p>

<p><code>ruby
gem 'sinatra-activerecord'
gem 'sqlite3'
</code></p>

<p>DB接続部分を書く. とりあえずapp.rbに書いた.</p>

<p>```ruby
require 'sinatra'
require 'active_record'</p>

<p>ActiveRecord::Base.establish_connection(
  adapter: 'sqlite3',
  database: 'development.sqlite3'
)</p>

<h1>以下省略</h1>

<p>```</p>

<p>Rakefile書く.</p>

<p><code>ruby
require 'sinatra/activerecord/rake'
require './app'
</code></p>

<p>これで<code>rake db:migrate</code>とか出来るようになった. 今回はとりあえずusersテーブル作る. <code>rake -T</code>すれば可能なコマンド一覧が見れる.</p>

<p><code>
bundle exec rake db:create_migration NAME=create_users
</code></p>

<p>するとdb/migrateの中にmigrationファイルが作られるので編集する.</p>

<p>```ruby
class CreateUsers &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :users do |t|
  t.string :name

  t.timestamps
end
</code></pre>

<p>  end
end
```</p>

<p>終わったらDBに反映.</p>

<p><code>
bundle exec rake db:migrate
</code></p>

<p>app.rbで使ってみる.</p>

<p>```ruby</p>

<h1>上は省略</h1>

<p>class User &lt; ActiveRecord::Base
end</p>

<p>get '/' do
  "Hello #{User.count} users!"
end
```</p>

<p>あとは</p>

<p><code>
bundle exec rackup
</code></p>

<p>して, <code>http://localhost:9292</code>にアクセスして確認.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SinatraでHello Worldするまで]]></title>
    <link href="http://nomnel.net/blog/sinatra-hello-world/"/>
    <updated>2013-10-21T21:30:00+09:00</updated>
    <id>http://nomnel.net/blog/sinatra-hello-world</id>
    <content type="html"><![CDATA[<p>続き-> <a href="http://nomnel.net/blog/sinatra-active-record/">SinatraでActiveRecord使う</a></p>

<!-- more -->


<p>Gemfile作ってbundle installする.</p>

<p>```ruby
source 'https://rubygems.org'</p>

<p>gem 'sinatra'
```</p>

<p>本体書く. app.rbに書くとする.</p>

<p>```ruby
require 'sinatra'</p>

<p>get '/' do
  'Hello World!'
end
```</p>

<p>config.ru書く.</p>

<p><code>ruby
require './app'
run Sinatra::Application
</code></p>

<p>起動する.</p>

<p><code>
bundle exec rackup
</code></p>

<p>で, <code>http://localhost:9292</code>にブラウザでアクセス.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyでeachのブロックに複数の値を渡す]]></title>
    <link href="http://nomnel.net/blog/ruby-multi-values-to-each-block/"/>
    <updated>2013-07-20T13:30:00+09:00</updated>
    <id>http://nomnel.net/blog/ruby-multi-values-to-each-block</id>
    <content type="html"><![CDATA[<p>配列で渡す.</p>

<p>```ruby
[[1, 2], [3, 4]].each{|a, b| puts b}</p>

<h1>2</h1>

<h1>4</h1>

<h1>ちなみに</h1>

<p>[[1, 2], [3, 4]].each{|a| puts a[1]}</p>

<h1>2</h1>

<h1>4</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
