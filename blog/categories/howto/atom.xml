<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: howto | 飲んだり寝たり]]></title>
  <link href="http://nomnel.net/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://nomnel.net/"/>
  <updated>2013-06-18T11:44:44+09:00</updated>
  <id>http://nomnel.net/</id>
  <author>
    <name><![CDATA[nomnel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkinsでビルド失敗時にGmailで通知する]]></title>
    <link href="http://nomnel.net/blog/jenkins-notification-using-gmail/"/>
    <updated>2013-06-14T00:00:00+09:00</updated>
    <id>http://nomnel.net/blog/jenkins-notification-using-gmail</id>
    <content type="html"><![CDATA[<p>Manage Jenkins -> Configure Systemを開き, E-mail Notification欄に以下のように記述する.<!-- more --></p>

<p><code>
SMTP server: smtp.gmail.com
Default user e-mail suffix: 空白
</code></p>

<p><code>Advanced...</code>をクリックして, 詳細設定を表示し,<code>use SMTP Authentication</code>にチェックを入れて,</p>

<p><code>
User Name: [USERNAME]@gmail.com
Password: 上のパスワード
Use SSL: チェックを入れる
SMTP Port: 465
Reply-To Address: [USERNAME]@gmail.com
Charset: UTF-8
</code></p>

<p>終わったら<code>Test configuration by sending test e-mail</code>にチェックを入れて, <code>Test e-mail recipient</code>に送信先アドレスを入力し, <code>Test configuration</code>をクリックしてテスト送信を行う. <code>Email was successfully sent</code>を表示されたら成功.</p>

<p><code>Save</code>もしくは<code>Apply</code>をクリックして設定を保存しておくのを忘れずに.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でturbolinksを使わない]]></title>
    <link href="http://nomnel.net/blog/rails4-no-turbolinks/"/>
    <updated>2013-05-29T15:04:00+09:00</updated>
    <id>http://nomnel.net/blog/rails4-no-turbolinks</id>
    <content type="html"><![CDATA[<p><code>rails new</code>するときにturbolinksがbundlerでインストールされるので, 嫌なら<code>--skip-bundle</code>オプションを付けて作成する.</p>

<p><code>sh
bundle exec rails new APPNAME --skip-bundle
</code></p>

<p>でまず, <code>Gemfile</code>から</p>

<p><code>ruby
gem 'turbolinks'
</code></p>

<p>の行をコメントアウト.</p>

<p>次に<code>app/assets/javascripts/application.js</code>で</p>

<p><code>javascript
//= require turbolinks
</code></p>

<p>の行を削除.</p>

<p>最後に<code>app/views/layouts/application.html.erb</code>で</p>

<p><code>erb
&lt;%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" =&gt; true %&gt;
&lt;%= javascript_include_tag "application", "data-turbolinks-track" =&gt; true %&gt;
</code></p>

<p>となっている箇所を</p>

<p><code>erb
&lt;%= stylesheet_link_tag    "application", media: "all" %&gt;
&lt;%= javascript_include_tag "application" %&gt;
</code></p>

<p>に変更.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで初期化後に何か処理をしたいとき]]></title>
    <link href="http://nomnel.net/blog/rails-after-initialize/"/>
    <updated>2013-05-15T01:15:00+09:00</updated>
    <id>http://nomnel.net/blog/rails-after-initialize</id>
    <content type="html"><![CDATA[<p><code>config/application.rb</code>などで</p>

<p><code>rb
config.after_initialize do
  # ここに処理を記述
end
</code></p>

<p>とすればよい.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでRspecとHamlとSass使いたいとき]]></title>
    <link href="http://nomnel.net/blog/rspec-haml-sass-on-rails/"/>
    <updated>2013-05-14T00:30:00+09:00</updated>
    <id>http://nomnel.net/blog/rspec-haml-sass-on-rails</id>
    <content type="html"><![CDATA[<p>よく忘れるのでメモしておく.</p>

<!-- more -->


<p><code>Gemfile</code>に以下を追加(sass-railsは標準で入ってるはず).</p>

<p><code>rb
gem 'rspec-rails'
gem 'haml-rails'
</code></p>

<p>括弧とかセミコロン書きたくないので.scssではなく.sassが生成されるようにする. <code>config/application.rb</code>で次のように指定.</p>

<p>```rb
module APPNAME
  class Application &lt; Rails::Application</p>

<pre><code>{ なんか色々 }
config.sass.preferred_syntax = :sass
</code></pre>

<p>  end
end
```</p>

<p>これで<code>bundle install</code>すればよい.</p>

<p><code>sh
bundle install --path vendor/bundle
</code></p>

<p>終わったらspecフォルダなどを生成しておく.</p>

<p><code>sh
rails g rspec:install
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JenkinsにOctopressのデプロイを任せる]]></title>
    <link href="http://nomnel.net/blog/jenkins-deploys-octopress/"/>
    <updated>2013-05-04T20:00:00+09:00</updated>
    <id>http://nomnel.net/blog/jenkins-deploys-octopress</id>
    <content type="html"><![CDATA[<p>BitbucketにOctopressのsourceブランチを置き, pushしたらJenkinsがGithub pageにデプロイするようにする.</p>

<h3>目次</h3>

<ol>
<li>環境</li>
<li>公開鍵認証用の鍵の生成と登録</li>
<li>プラグインのインストール</li>
<li>ジョブを作成</li>
<li>確認</li>
</ol>


<p>なお,</p>

<ul>
<li>Jenkinsのインストールは<a href="http://nomnel.net/blog/install-jenkins/">こちら</a></li>
<li>Octopressインストールは<a href="http://nomnel.net/blog/wordpress-to-octopress/">こちら</a></li>
</ul>


<p>を参照.</p>

<h3>環境</h3>

<ul>
<li>CentOS release 6.4 (Final)</li>
</ul>


<!-- more -->


<h3>公開鍵認証用の鍵の生成と登録</h3>

<p><code>sh
cd /var/lib/jenkins
sudo -u jenkins -H ssh-keygen -t rsa
</code></p>

<p>パスフレーズは設定しない. 出来た公開鍵(<code>/var/lib/jenkins/.ssh/id_rsa.pub</code>)の中身をBitbucketとGithubに登録しておく.</p>

<p>また, BitbucketとGithubに接続してknown hostsに加えておく.</p>

<p><code>sh
sudo -u jenkins git ls-remote -h git@github.com:user/repo.git HEAD
sudo -u jenkins git ls-remote -h git@bitbucket.org:user/repo.git HEAD
</code></p>

<h3>プラグインのインストール</h3>

<p>Manage Jenkins > Manage Plugins > Availableと進み, Git pluginとrbenv pluginにチェックを入れてInstall without restartをクリック.</p>

<h3>ジョブを作成</h3>

<ol>
<li>トップページでNew Jobをクリック</li>
<li>Job nameを記入し, Build a free-style software projectを選択してOKをクリック</li>
</ol>


<p>これで新しいジョブが作成される. 詳細設定は以下のようにする.</p>

<ol>
<li>Source Code Management: Git</li>
<li>Repository URL: <code>git@bitbucket.org:user/repo.git</code></li>
<li>Branches to build: <code>source</code></li>
<li>Build Triggers: Poll SCM (Scheduleは空白)</li>
<li>Build Environment: Rbenv build wrapperにチェック

<ul>
<li>Version: 1.9.3-p194</li>
<li>Preinstall gem list: bundler,rake</li>
</ul>
</li>
<li>Build > Add build step > Execute shell

<ul>
<li>Command: 下に記載</li>
</ul>
</li>
</ol>


<p><code>sh
export PATH="/var/lib/jenkins/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
rbenv exec bundle install --path vendor/bundle
rbenv exec bundle exec rake setup_github_pages\[git@github.com:nomnel/nomnel.github.io.git\]
rbenv exec bundle exec rake gen_deploy
</code></p>

<p>2回目以降は<code>setup_github_pages</code>の行は必要ないので消してもよい.</p>

<h3>トリガの登録</h3>

<p>参考: <a href="http://kohsuke.org/2011/12/01/polling-must-die-triggering-jenkins-builds-from-a-git-hook/">Kohsuke Kawaguchi » Polling must die: triggering Jenkins builds from a git hook</a></p>

<p>BitbucketのリポジトリのServicesでPOSTを追加. URLは<code>http://your.domain/jenkins/git/notifyCommit?url=git@bitbucket.org:user/repo.git</code>のようにする.</p>

<p>ブラウザ等で実際にURLにアクセスしてみてJobが実行されればOK.</p>

<p>これでBitbucketにpushするとJenkinsに通知が行って, Github pageにデプロイしてくれるようになった.</p>
]]></content>
  </entry>
  
</feed>
