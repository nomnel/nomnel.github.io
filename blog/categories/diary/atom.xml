<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: diary | 飲んだり寝たり]]></title>
  <link href="http://nomnel.net/blog/categories/diary/atom.xml" rel="self"/>
  <link href="http://nomnel.net/"/>
  <updated>2013-06-14T00:33:36+09:00</updated>
  <id>http://nomnel.net/</id>
  <author>
    <name><![CDATA[nomnel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[インターン(53) ブロック機能のバグ修正]]></title>
    <link href="http://nomnel.net/blog/fjord-days-53/"/>
    <updated>2013-06-04T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-days-53</id>
    <content type="html"><![CDATA[<p>何日目か考えるのが面倒なので単なる連番にする.</p>

<p>前回の作業週から取り組んでいた<a href="http://nomnel.net/blog/fjord-day52/">ブロック機能のバグ修正</a>の話. ブロックしたユーザが非表示にならず, 再度ブロックするとDBのユニーク制約に違反してエラーになるのが原因だった.<!-- more --></p>

<p>なのでブロック済みユーザのコメントは取得しないようにしようと試みる. 怖話では, 怖い話(Story), 怖い画像(Wallpaper), 怖い漫画(Comic)のそれぞれにコメントを付けることが出来(acts_as_commentable), ブロックは投稿したユーザからコメントしたユーザへの一方向になっている. また, 管理者以外のユーザがブロック済みユーザのコメントを見ることは無いはずなのでCommentクラスのdefault_scopeに</p>

<p>```ruby
default_scope -> {
  joins('left join stories    on comments.commentable_type = "Story"     and comments.commentable_id = stories.id ').
  joins('left join wallpapers on comments.commentable_type = "Wallpaper" and comments.commentable_id = wallpapers.id ').
  joins('left join comics     on comments.commentable_type = "Comic"     and comments.commentable_id = comics.id ').
  where('comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =</p>

<pre><code>(case when comments.commentable_type = "Story"     then stories.user_id
      when comments.commentable_type = "Wallpaper" then wallpapers.user_id
      else                                              comics.user_id end))')
</code></pre>

<p>}
```</p>

<p>と書いた.</p>

<p>これで"ブロック済みユーザのコメントは取得しない"という目的は達成されるのだが, 今度は<code>includes(:commentable)</code>とすると<code>ActiveRecord::EagerLoadPolymorphicError - Can not eagerly load the polymorphic association :commentable</code>となってしまう.</p>

<p>回避する方法は分からなかったのだが, 現状<code>includes(:commentable)</code>が必要になる箇所はトップページ(/), コメント一覧ページ(/comments), 怖い漫画のトップページ(/comics)であり, 特にトップページは表示回数が多いはずなのでRailsやその他のキャッシュで対処出来ないかな…という淡い期待でそのままにした.</p>

<p>何か他にいい方法無いかな…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン52日目]]></title>
    <link href="http://nomnel.net/blog/fjord-day52/"/>
    <updated>2013-05-23T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-day52</id>
    <content type="html"><![CDATA[<p>さて今日は</p>

<ol>
<li>背景画像切り替えが出来なくなっている原因の調査</li>
<li>ランキング入りの怖話が削除されるとトップページ、ランキングページが表示できなくなるバグ修正</li>
<li>Twitter Cardsの申請のために各ページにog:titleを追加</li>
<li>ブロック機能のバグ修正 (途中)</li>
</ol>


<p>をしていた. <!-- more --></p>

<p>1は前回"怖話中で指定の画像が無い場合に背景がなくなる"の対策をした際に</p>

<p>```coffeescript
$.ajax
  type: 'get'
  url: '画像のURL'
  success: -></p>

<pre><code>そのまま表示
</code></pre>

<p>  error: -></p>

<pre><code>デフォルト画像を表示
</code></pre>

<p>```</p>

<p>のようにやっていたがために<code>Same Origin Policy</code>に違反するようになってしまったことが原因(本番環境では画像は<code>cdn.kowabana.jp</code>という別ドメインにある). Access-Control-Allow-Origin ヘッダーというのを<code>cdn.kowabana.jp</code>側に追加してやればいいらしいけどどうやるんだろ.</p>

<p>2はそもそも怖話が削除されたときにランキングからも削除されなければいけない(はず)なので, StoryモデルからRankingモデルに<code>dependent: :destroy</code>を追加.</p>

<p>3は<code>app/views/layouts/application.html.haml</code>にメタタグを追加するだけ(各ページのタイトルを生成する関数はすでにあったので).</p>

<p>4はコメントしたユーザを指定してブロック出来る機能なのだけれど, ブロックしたはずのユーザのコメントも表示されているというもの(もう一度ブロックするとユニーク制約によりエラー). 怖い話, 画像, 漫画の全てにコメントをつけることが出来る仕様なので, それぞれで場合分けをしてブロックされたユーザのコメントは取得しないようにしたい. 具体的には</p>

<p>```sql
select comments.* from comments
left join stories    on comments.commentable_type = 'Story'     and comments.commentable_id = stories.id
left join wallpapers on comments.commentable_type = 'Wallpaper' and comments.commentable_id = wallpapers.id
left join comics     on comments.commentable_type = 'Comic'     and comments.commentable_id = comics.id
where comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =
(case when comments.commentable_type = 'Story'     then stories.user_id</p>

<pre><code>  when comments.commentable_type = 'Wallpaper' then wallpapers.user_id
  else                                              comics.user_id end))
</code></pre>

<p>```</p>

<p>のようなSQLを発行できるようにしたい.</p>

<p>基本的にブロック済みのコメントは表示されないはずなので, とりあえずdefault_scopeに以下のように記述してみたのだが</p>

<p>```ruby
default_scope -> {
  joins('left join stories    on comments.commentable_type = "Story"     and comments.commentable_id = stories.id ').
  joins('left join wallpapers on comments.commentable_type = "Wallpaper" and comments.commentable_id = wallpapers.id ').
  joins('left join comics     on comments.commentable_type = "Comic"     and comments.commentable_id = comics.id ').
  where('comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =</p>

<pre><code>(case when comments.commentable_type = "Story" then stories.user_id when comments.commentable_type = "Wallpaper" then wallpapers.user_id else comics.user_id end))')
</code></pre>

<p>}
```</p>

<p><code>Can not eagerly load the polymorphic association</code>と表示されて失敗. 一旦ここまで.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン51日目(多分)]]></title>
    <link href="http://nomnel.net/blog/fjord-day51/"/>
    <updated>2013-05-20T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-day51</id>
    <content type="html"><![CDATA[<p>さて今日は</p>

<ol>
<li>怖話中で指定の画像が無い場合に背景がなくなる</li>
</ol>


<p>をやっていた. <!-- more --></p>

<p>2つ詰まったところがあって,</p>

<p>1つは配列の要素それぞれを使ってajax通信した後に通信結果を使って元の配列を変更したい場合, 例えば次のように書くと</p>

<p>```coffeescript
foos = ['a', 'b', 'c']
for foo, idx in foos
  $.ajax</p>

<pre><code>type: 'get'
url: '/bar'
success: -&gt;
  foos[idx] = foo + 'baz'
</code></pre>

<p>```</p>

<p>全てのsuccess呼び出し内で<code>idx = 2</code>, <code>foo = 'c'</code>となってしまうやつ. これは</p>

<p>```coffeescript
foos = ['a', 'b', 'c']
for foo, idx in foos
  ((foo, idx) -></p>

<pre><code>$.ajax
  type: 'get'
  url: '/bar'
  success: -&gt;
    foos[idx] = foo + 'baz'
</code></pre>

<p>  ) foo, idx
```</p>

<p>みたいに予め適用しといてやるとよさげ.</p>

<p>もう1つは,</p>

<p>```coffeescript
class Klass
  prop: 'foo'</p>

<p>  proc1: -></p>

<pre><code>pr2 = @proc2
$.ajax
  type: 'get'
  url: '/bar'
  success: -&gt;
    pr2()
</code></pre>

<p>  proc2: -></p>

<pre><code>console.log @prop
</code></pre>

<p>```</p>

<p>ってやるとsuccessの中のpr2の中で@propがundefinedになるやつ. これは単純に</p>

<p>```coffeescript
  proc2: =></p>

<pre><code>console.log @prop
</code></pre>

<p>```</p>

<p>と, fat arrow使えばおーけー, 多分.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン46日目]]></title>
    <link href="http://nomnel.net/blog/fjord-day46/"/>
    <updated>2013-05-10T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-day46</id>
    <content type="html"><![CDATA[<p>さて今日は,</p>

<ol>
<li>作業途中に気になった細かいもの3つ</li>
<li>特選の怖い話を管理画面から編集できるようにする (途中)</li>
</ol>


<p>をしていた.</p>

<!-- more -->


<p>細かいものというのは以下.</p>

<ol>
<li><code>rake db:migrate</code>すると<code>db/schema.rb</code>が変更される(not nullの追加)
 -> 変更漏れっぽいので適用</li>
<li>先日"Google Analyticsの結果をLingrに通知"に取り組んだ際, client_idなどをベタ書きしていた
 -> <code>config/settings/production.yml</code>などに移動</li>
<li>管理者用の怖い話一覧画面で(多分)投稿者名を表示するところが<code>#&lt;User:0000000000&gt;</code>みたいになっていた
 -> 投稿者名を表示するように修正</li>
</ol>


<p>特選の怖い話を管理画面から編集できるようにするタスクの方針は</p>

<ol>
<li>特選の怖い話を上述の<code>config/settings/*.yml</code>で管理していたのを怖い話テーブルに移動</li>
<li>既存のcontrollerを修正</li>
<li>管理者用の特選編集画面を追加</li>
<li>特選から除外できるように</li>
<li>特選に追加できるように</li>
</ol>


<p>といったところで今は4に取り組んでいるところ. 除外と追加は一画面で遷移無しに出来るようにしたいなー.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン43日目]]></title>
    <link href="http://nomnel.net/blog/fjord-day43/"/>
    <updated>2013-05-07T17:30:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-day43</id>
    <content type="html"><![CDATA[<p>さて今日は、</p>

<ol>
<li>怖話投稿時のタグをフォーム10個に分ける</li>
<li>Googleアナリティクスの結果をLingrで知りたい (途中)</li>
</ol>


<p>をしていた.</p>

<!-- more -->


<p>1は実装(と言っても3行だが)のみでデザインは町田さんにお願いした.</p>

<p>2はrunnerのタスクとしてcronで定時に実行する方針. 明日には終わらせたい.</p>
]]></content>
  </entry>
  
</feed>
