<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: diary | 飲んだり寝たり]]></title>
  <link href="http://nomnel.net/blog/categories/diary/atom.xml" rel="self"/>
  <link href="http://nomnel.net/"/>
  <updated>2013-07-30T23:53:30+09:00</updated>
  <id>http://nomnel.net/</id>
  <author>
    <name><![CDATA[nomnel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[考えたくない]]></title>
    <link href="http://nomnel.net/blog/diary-2/"/>
    <updated>2013-07-30T23:45:00+09:00</updated>
    <id>http://nomnel.net/blog/diary-2</id>
    <content type="html"><![CDATA[<p>改蔵か絶望先生に「それを言うのはお前で一万人目だ」みたいなネタあったと思うんだけど, 一日に考えたり決めたりできる回数って決まってると思う.</p>

<p>正確にはMPみたいな感じで総量があって体調によって増減したりはするんだけど, 一回考えるごとにいくらか使う. 複雑なことだとより多く使う.</p>

<p>KP(考えポイント)は日常生活用や仕事用という様には分けれない. どんな服を着ようかとかこの道を通って行こうとかでも使われる. 人間関係で悩んだりすると仕事も進まなくなるのはこのせい.</p>

<p>じゃあどうすればいいかって考えるとやっぱりKPは消費されるんだけど, 考える対象を減らすことというのが自然で妥当で安直な解だと思う. 服は着ないし家から出ない. 人間関係はTwitterでふぁぼるだけ, ぐらいすると随分すっきりすると思う.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webサービスを作ってみる]]></title>
    <link href="http://nomnel.net/blog/develop-web-service/"/>
    <updated>2013-07-24T12:30:00+09:00</updated>
    <id>http://nomnel.net/blog/develop-web-service</id>
    <content type="html"><![CDATA[<p>先週からインターンはお休みをいただいてWebサービスを作っている. <!-- more -->今の見た目はこんな感じ(ま, まだ全然完成じゃないんだからねっ(言い訳1))</p>

<p><img src="http://gyazo.com/121d4b1284e97406b2df6c29b3af0250.png" alt="" /></p>

<p>で, 要はiPhoneアプリのレビューまとめを作ろうとしている.</p>

<h3>基準</h3>

<p>最初に以下の項目について考えた.</p>

<ol>
<li>実現性 - 最初は1~2週間で十分出来るもの</li>
<li>コンテンツの確保と更新 - 自分がコンテンツ作者だと続かない</li>
<li>ある程度の商圏 - 全く需要無いのもつらい, データで開発方針決めたりしたい</li>
<li>興味 - AppStoreのランキング以外の方法でアプリを知りたい</li>
<li>売上 - どうしたらより見てもらえるかなどのデータ欲しい</li>
<li>問題の解決 - しょぼくても何かしら世の中の役に立つこと</li>
</ol>


<p>偉そうに並べているけどなかなか条件をクリア出来るものが思いつかずに3日ぐらいかかった.</p>

<h3>サービスの意味</h3>

<p>こんなことを考えてた.</p>

<ol>
<li>アプリを見つける場所を増やす
 <p>自分が探すとき, 「AppStoreのランキングを見る -> たまにレビューを検索する -> 購入」という流れがほとんどだった. これはアイコンやタイトル, 評価をざっと眺めてから気になったものだけを細かく知りたいということなのだけれど, 既存のレビューサイトだとざっと眺めるのが難しうえに, 複数のレビューサイトを見るのも面倒で, 一サイトだけだと更新頻度にも限度があって不満だった.</p></li>
<li>レビューサイト界隈の裾野を広げる
 <p>レビューサイトで思い浮かぶのって2つ3つ程度しかない. 多分みんなも同様で, 結果, 有名サイトがほとんどのアクセスを占めているんだと思った. もしレビュー単位で同列に扱えればマイナーサイトでもアクセスが得られて, {中略}結果, レビューサイト界隈の多様性が増えたらいいと思う.</p></li>
<li>個人開発者のアプリでも注目されやすくする
 <p>有名レビューサイトにレビュー依頼をしても採用されないかもしれないことを考えるとすごくもったいない. なので開発者が自分で書いたレビューをプレスリリース的に載せる場所があればいいんじゃないかって思った.</p></li>
</ol>


<h3>開発方針</h3>

<ol>
<li>最初は最小の機能で</li>
<li>必要な物から作る</li>
<li>汚くてもいい</li>
<li>手間かけない</li>
</ol>


<p>とにかく早く作ることを目指した.</p>

<h3>必要な機能</h3>

<ol>
<li>レビューのスクレイピング</li>
<li>レビューと紹介されているアプリの表示 (最初はiPhone向けに作る)</li>
</ol>


<p>データの取得と更新はスクレイピングだけで良いのでタスクをcronで回すようにすれば管理画面も要らない, 素敵!</p>

<h3>予定</h3>

<ol>
<li>スクレイピング -> プロトタイプ2日 + 回しながらバグ修正とか追加とか2日</li>
<li>表示 -> 3日(CSS苦手)</li>
<li>本番環境の準備 -> 1.5日</li>
</ol>


<h3>実際</h3>

<ol>
<li>スクレイピング -> プロトタイプ5日 + バグ修正1日弱(もう増えないと思う)</li>
<li>表示 -> 2日目(途中), 後2日見込み</li>
</ol>


<p>以下ハイパー言い訳タイム.</p>

<h3>悩んだ(でいる) || 時間かかったところ</h3>

<ol>
<li>汚さをどこまで許容するか
 <p>自分だけが読むもの(<a href="https://github.com/nomnel/ProjectEuler/blob/master/086.scm">これ</a>とか)は1文字変数とか長い関数でもいいやってなるんだけど, 人が見る可能性考えると読みやすくしなきゃってなってそのために時間を浪費していると思った. 汚くてもいいやって思えたのは作り始めてしばらくしてからだったので, 既存のコードとの汚さのバランスとか考えてもっと時間を浪費することになった.</p></li>
<li>最小の機能とは
 <p>最小の機能と言いつつ範囲をはっきりさせてなかったので良くなかった. まだ必要ないrouteやcontrollerを作ってしまった. 範囲を決めたのは画面デザインを考え始めてからで, あんまり遷移させたくないなって思ったから. 必要な物から作ると決めていたので傷はそこまで深くなかったのは良かった.</p></li>
<li>画像を保存するか
 <p>アプリのアイコンを保存しておくか, Appleのにリンク貼るかも少し悩んだ. 工数増やしたくないし, AppBankがやってて怒られてないならいっかと思ってリンクにした.</p></li>
<li>何をどのように表示するか
 <p>何を表示するかとかユーザが必要な情報は何かとか難しい. レビューまとめなのでレビューを目立たせたいけど, 本文まで表示するとレビューサイトへのタダ乗りになるので良くない. レビューされたアプリを表示しないと見た目的にただのリンク集になってしまうし, 表示したら今度は一つのレビューにつき何個まで表示するのかとか, どこまで詳細に表示するかも悩むことになる. 今は, 最小限の表示にしておいてユーザ操作で残りを表示するのがいいかなって思ってる.</p></li>
</ol>


<p>やっぱりというか, 悩んでることは実際に手を動かし始めると簡単に解決することが多い. とりあえずやってみるの大事. "Shut the f**k up and write some code."な.</p>

<h3>他に</h3>

<p>私事だけど開発に一番影響大きかったのが人生に関わる提案をいただいたこと. 正直なところ開発どころではなかったけど, やっと結論と気持ちの整理が出来た.</p>

<h3>今後</h3>

<p>現状だとただのリンク集なのでリリース後には</p>

<ol>
<li>レビューの人気ランキング</li>
<li>開発者(or ユーザ)がレビューを投稿できるように</li>
</ol>


<p>などサイトの特徴を出す機能を開発していきたい. 合わせて</p>

<ol>
<li>アプリ別</li>
<li>レビューサイト別</li>
<li>開発者別</li>
<li>カテゴリ別</li>
</ol>


<p>のレビュー一覧画面と, 並べ替え機能を追加していきたい.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日記 1]]></title>
    <link href="http://nomnel.net/blog/diary-1/"/>
    <updated>2013-07-13T00:00:00+09:00</updated>
    <id>http://nomnel.net/blog/diary-1</id>
    <content type="html"><![CDATA[<p>ブログしばらく書いてないと思ったら一ヶ月ぐらい書いてなかった. しばらく書いてないと次書くときは高度なこと書かなきゃいけない気がして余計書きにくい. Railsで多対多の関係表現するのどうするんだっけとかいつも忘れるのでメモっておきたいんだけど書いてないとこれじゃショボすぎるからやめとこうと思って書かない. 結果またググることになる.</p>

<p>といっても自分で制限かけてるだけだから普段からショボいこと書いてたら遠慮なくショボいこと書けるようになると思った. 日記だとどう頑張ってもショボいことしか書けないけど書くと一日の振り返り出来そうだし都合良い. あと毎日続けたいので出来るだけ考えなくても書けるようにしたい. <a href="https://twitter.com/hitode909">趣味はマリンスポーツです</a>さんの<a href="http://hitode909.hatenablog.com/">日記</a>ぽい文体だとダラダラ書ける感じがして良い. そのうちもっと楽なの思いつくかもしれないけどとりあえずこんな書き方でやろうと思う.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン(54) 怖話ブログの日付フォーマット修正]]></title>
    <link href="http://nomnel.net/blog/fjord-days-54/"/>
    <updated>2013-06-17T15:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-days-54</id>
    <content type="html"><![CDATA[<p>「怖話ブログの日付フォーマットがおかしい」に取り組んだ記録.<!-- more --></p>

<p><a href="http://blog.kowabana.jp/">怖話ブログ</a>で日付フォーマットが<code>dd/mm/yyyy</code>になっているのを<code>yyyy/mm/dd</code>に修正する作業.</p>

<h3>成功ルート</h3>

<p><code>sh
git clone git@github.com:fjordllc/blog-kowabana-jp.git
cd blog-kowabana-jp
</code></p>

<p>で<code>bundle install</code>すると</p>

<p>```sh
Fetching gem metadata from http://rubygems.org/.........</p>

<h1>中略</h1>

<p>Could not find sinatra-content-for-0.2 in any of the sources
```</p>

<p>となって失敗するので(<a href="#fail1">迷走1へ</a>), lokkaのmasterをmergeしてみる.</p>

<p><code>sh
git remote add lokka git@github.com:lokka/lokka.git
git fetch lokka
git merge lokka/master
</code></p>

<p>すると<code>bundle install</code>成功!</p>

<p>次に<code>bundle exec rackup</code>して実画面でも確認してみる -> 問題なし</p>

<p>最後にテスト通るか確認しておく(<a href="#fail2">迷走2へ</a>).</p>

<p>無事全てのテストがパスしたのでpush.</p>

<p>ちなみに変更は以下のように形式を指定してやっただけ.</p>

<p><code>erb
-        &lt;p class="date"&gt;&lt;%= l post.created_at.to_time %&gt;&lt;/p&gt;
+        &lt;p class="date"&gt;&lt;%= post.created_at.strftime("%Y/%m/%d") %&gt;&lt;/p&gt;
</code></p>

<h3><a name="fail1">迷走1</a></h3>

<ol>
<li>Gemfileから<code>sinatra-content-for</code>を消してみよう</li>
<li>-> なんやかんやダメ</li>
<li>テンプレートの変更のみやし, 素のlokkaにテンプレートコピって確認すればええやろ</li>
<li>-> <a href="https://twitter.com/komagata">@komagata</a>「( ◠‿◠ )☛ なわけねーだろ」僕「▂▅▇█▓▒░('ω')░▒▓█▇▅▂」</li>
<li><a href="https://twitter.com/komagata">@komagata</a>「lokkaのmasterをmergeすればいんじゃね?」僕「( ﾟдﾟ)ﾊｯ!」</li>
</ol>


<h3><a name="fail2">迷走2</a></h3>

<p><code>bundle exec rake</code>しても</p>

<p><code>sh
syck has been removed
Delete Database...
</code></p>

<p>とのみ表示されてspecが実行されない(前回の作業週ではここで力尽きた). (今回の作業週でも<code>git merge lokka/master</code>して更新している)不思議に思って<code>-t</code>オプションを付けてみると</p>

<p><code>sh
syck has been removed
** Invoke default (first_time)
** Invoke spec:setup (first_time)
** Execute spec:setup
** Invoke db:delete (first_time)
** Execute db:delete
Delete Database...
** Invoke spec (first_time, not_needed)
** Execute default
</code></p>

<p>と表示される. 比較のためlokkaにも同様にしてみると</p>

<p><code>sh
syck has been removed
** Invoke default (first_time)
** Invoke spec:setup (first_time)
** Execute spec:setup
** Invoke db:delete (first_time)
** Execute db:delete
Delete Database...
** Invoke spec (first_time)
** Invoke spec:setup
** Execute spec
** Execute default
</code></p>

<ol>
<li><code>Invoke spec</code>の<code>not_needed</code>が怪しい!!</li>
<li>-> rakeのソースコードへ</li>
<li>-> 分からない</li>
<li>-> 気分転換に新しい環境でやり直してみよう!!</li>
<li>-> <code>bundle exec rake</code>でspecが実行される</li>
<li>-> (ﾟДﾟ)ﾊｧ?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン(53) ブロック機能のバグ修正]]></title>
    <link href="http://nomnel.net/blog/fjord-days-53/"/>
    <updated>2013-06-04T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-days-53</id>
    <content type="html"><![CDATA[<p>何日目か考えるのが面倒なので単なる連番にする.</p>

<p>前回の作業週から取り組んでいた<a href="http://nomnel.net/blog/fjord-day52/">ブロック機能のバグ修正</a>の話. ブロックしたユーザが非表示にならず, 再度ブロックするとDBのユニーク制約に違反してエラーになるのが原因だった.<!-- more --></p>

<p>なのでブロック済みユーザのコメントは取得しないようにしようと試みる. 怖話では, 怖い話(Story), 怖い画像(Wallpaper), 怖い漫画(Comic)のそれぞれにコメントを付けることが出来(acts_as_commentable), ブロックは投稿したユーザからコメントしたユーザへの一方向になっている. また, 管理者以外のユーザがブロック済みユーザのコメントを見ることは無いはずなのでCommentクラスのdefault_scopeに</p>

<p>```ruby
default_scope -> {
  joins('left join stories    on comments.commentable_type = "Story"     and comments.commentable_id = stories.id ').
  joins('left join wallpapers on comments.commentable_type = "Wallpaper" and comments.commentable_id = wallpapers.id ').
  joins('left join comics     on comments.commentable_type = "Comic"     and comments.commentable_id = comics.id ').
  where('comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =</p>

<pre><code>(case when comments.commentable_type = "Story"     then stories.user_id
      when comments.commentable_type = "Wallpaper" then wallpapers.user_id
      else                                              comics.user_id end))')
</code></pre>

<p>}
```</p>

<p>と書いた.</p>

<p>これで"ブロック済みユーザのコメントは取得しない"という目的は達成されるのだが, 今度は<code>includes(:commentable)</code>とすると<code>ActiveRecord::EagerLoadPolymorphicError - Can not eagerly load the polymorphic association :commentable</code>となってしまう.</p>

<p>回避する方法は分からなかったのだが, 現状<code>includes(:commentable)</code>が必要になる箇所はトップページ(/), コメント一覧ページ(/comments), 怖い漫画のトップページ(/comics)であり, 特にトップページは表示回数が多いはずなのでRailsやその他のキャッシュで対処出来ないかな…という淡い期待でそのままにした.</p>

<p>何か他にいい方法無いかな…</p>
]]></content>
  </entry>
  
</feed>
