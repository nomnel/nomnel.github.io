<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: diary | 飲んだり寝たり]]></title>
  <link href="http://nomnel.net/blog/categories/diary/atom.xml" rel="self"/>
  <link href="http://nomnel.net/"/>
  <updated>2013-07-18T11:50:30+09:00</updated>
  <id>http://nomnel.net/</id>
  <author>
    <name><![CDATA[nomnel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[日記 1]]></title>
    <link href="http://nomnel.net/blog/diary-1/"/>
    <updated>2013-07-13T00:00:00+09:00</updated>
    <id>http://nomnel.net/blog/diary-1</id>
    <content type="html"><![CDATA[<p>ブログしばらく書いてないと思ったら一ヶ月ぐらい書いてなかった. しばらく書いてないと次書くときは高度なこと書かなきゃいけない気がして余計書きにくい. Railsで多対多の関係表現するのどうするんだっけとかいつも忘れるのでメモっておきたいんだけど書いてないとこれじゃショボすぎるからやめとこうと思って書かない. 結果またググることになる.</p>

<p>といっても自分で制限かけてるだけだから普段からショボいこと書いてたら遠慮なくショボいこと書けるようになると思った. 日記だとどう頑張ってもショボいことしか書けないけど書くと一日の振り返り出来そうだし都合良い. あと毎日続けたいので出来るだけ考えなくても書けるようにしたい. <a href="https://twitter.com/hitode909">趣味はマリンスポーツです</a>さんの<a href="http://hitode909.hatenablog.com/">日記</a>ぽい文体だとダラダラ書ける感じがして良い. そのうちもっと楽なの思いつくかもしれないけどとりあえずこんな書き方でやろうと思う.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン(54) 怖話ブログの日付フォーマット修正]]></title>
    <link href="http://nomnel.net/blog/fjord-days-54/"/>
    <updated>2013-06-17T15:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-days-54</id>
    <content type="html"><![CDATA[<p>「怖話ブログの日付フォーマットがおかしい」に取り組んだ記録.<!-- more --></p>

<p><a href="http://blog.kowabana.jp/">怖話ブログ</a>で日付フォーマットが<code>dd/mm/yyyy</code>になっているのを<code>yyyy/mm/dd</code>に修正する作業.</p>

<h3>成功ルート</h3>

<p><code>sh
git clone git@github.com:fjordllc/blog-kowabana-jp.git
cd blog-kowabana-jp
</code></p>

<p>で<code>bundle install</code>すると</p>

<p>```sh
Fetching gem metadata from http://rubygems.org/.........</p>

<h1>中略</h1>

<p>Could not find sinatra-content-for-0.2 in any of the sources
```</p>

<p>となって失敗するので(<a href="#fail1">迷走1へ</a>), lokkaのmasterをmergeしてみる.</p>

<p><code>sh
git remote add lokka git@github.com:lokka/lokka.git
git fetch lokka
git merge lokka/master
</code></p>

<p>すると<code>bundle install</code>成功!</p>

<p>次に<code>bundle exec rackup</code>して実画面でも確認してみる -> 問題なし</p>

<p>最後にテスト通るか確認しておく(<a href="#fail2">迷走2へ</a>).</p>

<p>無事全てのテストがパスしたのでpush.</p>

<p>ちなみに変更は以下のように形式を指定してやっただけ.</p>

<p><code>erb
-        &lt;p class="date"&gt;&lt;%= l post.created_at.to_time %&gt;&lt;/p&gt;
+        &lt;p class="date"&gt;&lt;%= post.created_at.strftime("%Y/%m/%d") %&gt;&lt;/p&gt;
</code></p>

<h3><a name="fail1">迷走1</a></h3>

<ol>
<li>Gemfileから<code>sinatra-content-for</code>を消してみよう</li>
<li>-> なんやかんやダメ</li>
<li>テンプレートの変更のみやし, 素のlokkaにテンプレートコピって確認すればええやろ</li>
<li>-> <a href="https://twitter.com/komagata">@komagata</a>「( ◠‿◠ )☛ なわけねーだろ」僕「▂▅▇█▓▒░('ω')░▒▓█▇▅▂」</li>
<li><a href="https://twitter.com/komagata">@komagata</a>「lokkaのmasterをmergeすればいんじゃね?」僕「( ﾟдﾟ)ﾊｯ!」</li>
</ol>


<h3><a name="fail2">迷走2</a></h3>

<p><code>bundle exec rake</code>しても</p>

<p><code>sh
syck has been removed
Delete Database...
</code></p>

<p>とのみ表示されてspecが実行されない(前回の作業週ではここで力尽きた). (今回の作業週でも<code>git merge lokka/master</code>して更新している)不思議に思って<code>-t</code>オプションを付けてみると</p>

<p><code>sh
syck has been removed
** Invoke default (first_time)
** Invoke spec:setup (first_time)
** Execute spec:setup
** Invoke db:delete (first_time)
** Execute db:delete
Delete Database...
** Invoke spec (first_time, not_needed)
** Execute default
</code></p>

<p>と表示される. 比較のためlokkaにも同様にしてみると</p>

<p><code>sh
syck has been removed
** Invoke default (first_time)
** Invoke spec:setup (first_time)
** Execute spec:setup
** Invoke db:delete (first_time)
** Execute db:delete
Delete Database...
** Invoke spec (first_time)
** Invoke spec:setup
** Execute spec
** Execute default
</code></p>

<ol>
<li><code>Invoke spec</code>の<code>not_needed</code>が怪しい!!</li>
<li>-> rakeのソースコードへ</li>
<li>-> 分からない</li>
<li>-> 気分転換に新しい環境でやり直してみよう!!</li>
<li>-> <code>bundle exec rake</code>でspecが実行される</li>
<li>-> (ﾟДﾟ)ﾊｧ?</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン(53) ブロック機能のバグ修正]]></title>
    <link href="http://nomnel.net/blog/fjord-days-53/"/>
    <updated>2013-06-04T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-days-53</id>
    <content type="html"><![CDATA[<p>何日目か考えるのが面倒なので単なる連番にする.</p>

<p>前回の作業週から取り組んでいた<a href="http://nomnel.net/blog/fjord-day52/">ブロック機能のバグ修正</a>の話. ブロックしたユーザが非表示にならず, 再度ブロックするとDBのユニーク制約に違反してエラーになるのが原因だった.<!-- more --></p>

<p>なのでブロック済みユーザのコメントは取得しないようにしようと試みる. 怖話では, 怖い話(Story), 怖い画像(Wallpaper), 怖い漫画(Comic)のそれぞれにコメントを付けることが出来(acts_as_commentable), ブロックは投稿したユーザからコメントしたユーザへの一方向になっている. また, 管理者以外のユーザがブロック済みユーザのコメントを見ることは無いはずなのでCommentクラスのdefault_scopeに</p>

<p>```ruby
default_scope -> {
  joins('left join stories    on comments.commentable_type = "Story"     and comments.commentable_id = stories.id ').
  joins('left join wallpapers on comments.commentable_type = "Wallpaper" and comments.commentable_id = wallpapers.id ').
  joins('left join comics     on comments.commentable_type = "Comic"     and comments.commentable_id = comics.id ').
  where('comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =</p>

<pre><code>(case when comments.commentable_type = "Story"     then stories.user_id
      when comments.commentable_type = "Wallpaper" then wallpapers.user_id
      else                                              comics.user_id end))')
</code></pre>

<p>}
```</p>

<p>と書いた.</p>

<p>これで"ブロック済みユーザのコメントは取得しない"という目的は達成されるのだが, 今度は<code>includes(:commentable)</code>とすると<code>ActiveRecord::EagerLoadPolymorphicError - Can not eagerly load the polymorphic association :commentable</code>となってしまう.</p>

<p>回避する方法は分からなかったのだが, 現状<code>includes(:commentable)</code>が必要になる箇所はトップページ(/), コメント一覧ページ(/comments), 怖い漫画のトップページ(/comics)であり, 特にトップページは表示回数が多いはずなのでRailsやその他のキャッシュで対処出来ないかな…という淡い期待でそのままにした.</p>

<p>何か他にいい方法無いかな…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン52日目]]></title>
    <link href="http://nomnel.net/blog/fjord-day52/"/>
    <updated>2013-05-23T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-day52</id>
    <content type="html"><![CDATA[<p>さて今日は</p>

<ol>
<li>背景画像切り替えが出来なくなっている原因の調査</li>
<li>ランキング入りの怖話が削除されるとトップページ、ランキングページが表示できなくなるバグ修正</li>
<li>Twitter Cardsの申請のために各ページにog:titleを追加</li>
<li>ブロック機能のバグ修正 (途中)</li>
</ol>


<p>をしていた. <!-- more --></p>

<p>1は前回"怖話中で指定の画像が無い場合に背景がなくなる"の対策をした際に</p>

<p>```coffeescript
$.ajax
  type: 'get'
  url: '画像のURL'
  success: -></p>

<pre><code>そのまま表示
</code></pre>

<p>  error: -></p>

<pre><code>デフォルト画像を表示
</code></pre>

<p>```</p>

<p>のようにやっていたがために<code>Same Origin Policy</code>に違反するようになってしまったことが原因(本番環境では画像は<code>cdn.kowabana.jp</code>という別ドメインにある). Access-Control-Allow-Origin ヘッダーというのを<code>cdn.kowabana.jp</code>側に追加してやればいいらしいけどどうやるんだろ.</p>

<p>2はそもそも怖話が削除されたときにランキングからも削除されなければいけない(はず)なので, StoryモデルからRankingモデルに<code>dependent: :destroy</code>を追加.</p>

<p>3は<code>app/views/layouts/application.html.haml</code>にメタタグを追加するだけ(各ページのタイトルを生成する関数はすでにあったので).</p>

<p>4はコメントしたユーザを指定してブロック出来る機能なのだけれど, ブロックしたはずのユーザのコメントも表示されているというもの(もう一度ブロックするとユニーク制約によりエラー). 怖い話, 画像, 漫画の全てにコメントをつけることが出来る仕様なので, それぞれで場合分けをしてブロックされたユーザのコメントは取得しないようにしたい. 具体的には</p>

<p>```sql
select comments.* from comments
left join stories    on comments.commentable_type = 'Story'     and comments.commentable_id = stories.id
left join wallpapers on comments.commentable_type = 'Wallpaper' and comments.commentable_id = wallpapers.id
left join comics     on comments.commentable_type = 'Comic'     and comments.commentable_id = comics.id
where comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =
(case when comments.commentable_type = 'Story'     then stories.user_id</p>

<pre><code>  when comments.commentable_type = 'Wallpaper' then wallpapers.user_id
  else                                              comics.user_id end))
</code></pre>

<p>```</p>

<p>のようなSQLを発行できるようにしたい.</p>

<p>基本的にブロック済みのコメントは表示されないはずなので, とりあえずdefault_scopeに以下のように記述してみたのだが</p>

<p>```ruby
default_scope -> {
  joins('left join stories    on comments.commentable_type = "Story"     and comments.commentable_id = stories.id ').
  joins('left join wallpapers on comments.commentable_type = "Wallpaper" and comments.commentable_id = wallpapers.id ').
  joins('left join comics     on comments.commentable_type = "Comic"     and comments.commentable_id = comics.id ').
  where('comments.user_id not in (select blocks.destination_id from blocks where blocks.source_id =</p>

<pre><code>(case when comments.commentable_type = "Story" then stories.user_id when comments.commentable_type = "Wallpaper" then wallpapers.user_id else comics.user_id end))')
</code></pre>

<p>}
```</p>

<p><code>Can not eagerly load the polymorphic association</code>と表示されて失敗. 一旦ここまで.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターン51日目(多分)]]></title>
    <link href="http://nomnel.net/blog/fjord-day51/"/>
    <updated>2013-05-20T17:00:00+09:00</updated>
    <id>http://nomnel.net/blog/fjord-day51</id>
    <content type="html"><![CDATA[<p>さて今日は</p>

<ol>
<li>怖話中で指定の画像が無い場合に背景がなくなる</li>
</ol>


<p>をやっていた. <!-- more --></p>

<p>2つ詰まったところがあって,</p>

<p>1つは配列の要素それぞれを使ってajax通信した後に通信結果を使って元の配列を変更したい場合, 例えば次のように書くと</p>

<p>```coffeescript
foos = ['a', 'b', 'c']
for foo, idx in foos
  $.ajax</p>

<pre><code>type: 'get'
url: '/bar'
success: -&gt;
  foos[idx] = foo + 'baz'
</code></pre>

<p>```</p>

<p>全てのsuccess呼び出し内で<code>idx = 2</code>, <code>foo = 'c'</code>となってしまうやつ. これは</p>

<p>```coffeescript
foos = ['a', 'b', 'c']
for foo, idx in foos
  ((foo, idx) -></p>

<pre><code>$.ajax
  type: 'get'
  url: '/bar'
  success: -&gt;
    foos[idx] = foo + 'baz'
</code></pre>

<p>  ) foo, idx
```</p>

<p>みたいに予め適用しといてやるとよさげ.</p>

<p>もう1つは,</p>

<p>```coffeescript
class Klass
  prop: 'foo'</p>

<p>  proc1: -></p>

<pre><code>pr2 = @proc2
$.ajax
  type: 'get'
  url: '/bar'
  success: -&gt;
    pr2()
</code></pre>

<p>  proc2: -></p>

<pre><code>console.log @prop
</code></pre>

<p>```</p>

<p>ってやるとsuccessの中のpr2の中で@propがundefinedになるやつ. これは単純に</p>

<p>```coffeescript
  proc2: =></p>

<pre><code>console.log @prop
</code></pre>

<p>```</p>

<p>と, fat arrow使えばおーけー, 多分.</p>
]]></content>
  </entry>
  
</feed>
